// Generated by CoffeeScript 1.8.0
registerDirective('inventoryElements', {
  restrict: 'E',
  template: '<div ng-if="elements.length">' + '<h4>{{inventory.name}}</h4>' + '<span>Sort by: </span>' + '<div class="btn-group">' + '<button class="btn btn-default btn-sm navbar-btn" ng-click="sort(\'type\')" ng-class="{\'active\': sorting === \'type\'}"><span class="fa fa-send-o"> Element type</span></button>' + '<button class="btn btn-default btn-sm navbar-btn" ng-click="sort(\'status\')" ng-class="{\'active\': sorting === \'status\'}"><span class="fa fa-list"> Inventory state</span></button>' + '</div>' + '<div class="list-group">' + '<a href="{{URLconfig.element}}/{{element.hash}}" ng-repeat="element in elements | orderBy:sorting:true" class="list-group-item">' + '<span ng-if="element.status.value" class="badge" ng-class="{\'badge-info\': !element.status.value, \'badge-danger\': (element.status.value === \'notfound\'), \'badge-warning\': (element.status.value === \'misplaced\'), \'badge-success\': (element.status.value === \'placed\')}">{{element.status.value}}</span>' + '{{element.element_name}}' + '</a>' + '</div>' + '</div>',
  controller: function($scope, $rootScope, $http, $q) {
    var getElements, setElements, urlBase;
    urlBase = 'https://edocu.service.dev.edocu.local';
    $scope.sorting = 'status';
    $scope.sortingOrder = true;
    getElements = function(hash) {
      var defer;
      defer = $q.defer();
      $http.get(urlBase + '/service/inventory-process/inventory/' + hash + '/elements?element=' + $scope.element.hash).success(function(response) {
        return defer.resolve(response);
      }).error(function() {
        return defer.resolve(false);
      });
      return defer.promise;
    };
    setElements = function(elements) {
      $scope.elements = elements;
    };
    $rootScope.$on('inventory.selected', function(event, inventory) {
      $scope.$apply(function() {
        $scope.inventory = inventory;
      });
      getElements(inventory.hash).then(function(elements) {
        return setElements(elements);
      });
    });
    $scope.sort = function(sortBy) {
      if ($scope.sorting === sortBy) {
        return $scope.sortingOrder = !$scope.sortingOrder;
      } else {
        return $scope.sorting = sortBy;
      }
    };
  }
});
